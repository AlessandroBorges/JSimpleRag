package bor.tools.utils;

/**
 * JsonToStringBuilder.java
 * Project EclipseToStringBuilderForJson
 * Licensed under MIT.
 * Source: https://github.com/djaganathan/EclipseToStringBuilderForJson
 */
//package com.github.djaganathan.opensource.eclipse.util;

import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;

/**
 * This is a Eclipse Custom toString Builder class, which help to generate toString method to return a
 * JSON formatted string.
 * <pre>
 * Configure this Custom toString Builder in Eclipse using following steps
 * open eclipse dialog by navigating:- Source and then Generate toString()...
 * choose whatever fields you want to be included in the toString method.
 * significant point here is, choose "custom toString() builder" in the code style drop down and click on "configure"
 * 	provide inputs
 * 		Builder class - as JsonToStringBuilder
 * 		Builder Name - can be you own name
 * 		Append Method - as append
 * 		Result Method - can be either build/toString
 * 		Optionally : tick chained function if you like to have fluent model.
 *
 * Caveat:
 *  - don't tick Skip null values,
 *  - list content of array instead of native toString.
 * </pre>
 *
 * References:-
 * http://help.eclipse.org/kepler/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-tostring-styles.htm
 * https://gist.github.com/ulisseslima/7de22e06f85846594a1bd6ffff79b0da
 * http://stackoverflow.com/questions/41967627/how-to-create-string-format-template-to-generate-json-for-eclipse-autogenerated
 */
public class JsonToStringBuilder {

    private StringBuilder aJson = new StringBuilder(256);

    public JsonToStringBuilder() {
        super();
        aJson.ensureCapacity(256);
    }


    public JsonToStringBuilder(Object o) {
        super();
        aJson.ensureCapacity(256);
    }

    /**
     * This append method prepares the a Key and Value element in the JSON for input of fieldName
     * and fieldValue
     *
     * @param fieldName  - Json Key
     * @param fieldValue - Json value
     * @return this -- returns Custom toString Builder
     */
    public JsonToStringBuilder append(final String fieldName, final Object fieldValue) {
    	if(fieldValue!=null)
    		aJson.append(aJson.length() == 0 ? "" : ",").append("\"").append(fieldName).append("\": ").append(new ValueSerializer(fieldValue).serialize());
        return this;
    }

    /**
     * Método alternativo. Use #plain como true para escrever o valor sem formatação JSON adicional.
     *
     * @param fieldName  - Json Key
     * @param fieldValue - Json value
     * @param plain - true para não converter o valor
     *
     * @return this -- returns Custom toString Builder
     */
    public JsonToStringBuilder append(final String fieldName, final Object fieldValue, boolean plain) {
    	if(!plain)
    		return this.append(fieldName, fieldValue);

    	if(fieldValue!=null)
    		aJson.append(aJson.length() == 0 ? "" : ",").append("\"").append(fieldName).append("\": ").append(fieldValue.toString());
        return this;
    }

	/**
	 * Gives to a String in the JSON format
	 *
	 * @return String - In the format of Json
	 */
	public String build() {
		return toString();
	}

	/**
	 * Return a escaped String in the JSON format
	 *
	 * @param input - String to be escaped
	 * @return String - In the format of Json
	 */
	public static String escapeStringForJson(String input) {
		return ValueSerializer.escapeStringForJson(input);
	}

	/**
	 * Return a quote/unquote String in the JSON format
	 *
	 * @param input - String to be escaped
	 * @return String - In the format of Json
	 */
	public static String escapeQuoteStringForJson(String input) {
		return "\"" + ValueSerializer.escapeStringForJson(input) + "\"";
	}
    /**
     * Builds a String representation of the object
     */
    @Override
    public String toString() {
        return "{" + aJson.toString() + "}";
    }

    class ValueSerializer {

        Object fieldValue;

        ValueSerializer(Object iFieldValue) {
            fieldValue = iFieldValue;
        }

        public StringBuilder serialize() {
            StringBuilder aValue = new StringBuilder(256);
            if (fieldValue == null) {
                aValue.append("null");
            } else if (fieldValue instanceof Number) {
                aValue.append(fieldValue);
            } else if (fieldValue instanceof Enum) {
            	  aValue.append("\"").append(fieldValue).append("\"");
            } else if (fieldValue instanceof CharSequence || fieldValue instanceof Enum) {
            	// Remove quebras de linhas
            	String clean = escapeStringForJson(fieldValue.toString());
                aValue.append("\"").append(clean).append("\"");
            } else if (fieldValue instanceof Collection<?> || fieldValue instanceof Object[]) {
                aValue.append(new LinearCollection(fieldValue).serialize());
            } else if (fieldValue instanceof Map<?, ?>) {
                aValue.append(new MappedCollection(fieldValue).serialize());
            } else {
                aValue.append(String.valueOf(fieldValue));
            }
            return aValue;
        }


        public static String escapeStringForJson(String input) {
            if (input == null) {
                return null;
            }

            StringBuilder escapedJson = new StringBuilder(256);
            for (int i = 0; i < input.length(); i++) {
                char ch = input.charAt(i);
                switch (ch) {
                    case '\"':
                        escapedJson.append("\\\"");
                        break;
                    case '\\':
                        escapedJson.append("\\\\");
                        break;
                    case '\b':
                        escapedJson.append("\\b");
                        break;
                    case '\f':
                        escapedJson.append("\\f");
                        break;
                    case '\n':
                        escapedJson.append("\\n");
                        break;
                    case '\r':
                        escapedJson.append("\\r");
                        break;
                    case '\t':
                        escapedJson.append("\\t");
                        break;
                    // Caso queira incluir a escapa de aspas simples:
                    // case '\'':
                    //     escapedJson.append("\\'");
                    //     break;
                    default:
                        // Referência para controlar caracteres especiais não imprimíveis
                        if ((ch > '\u0000' && ch <= '\u001F') || (ch >= '\u007F' && ch <= '\u009F') || (ch >= '\u2000' && ch <= '\u20FF')) {
                            String ss = Integer.toHexString(ch);
                            escapedJson.append("\\u");
                            for (int k = 0; k < 4 - ss.length(); k++) {
                                escapedJson.append('0');
                            }
                            escapedJson.append(ss.toUpperCase());
                        } else {
                            escapedJson.append(ch);
                        }
                }
            }
            return escapedJson.toString();
        }


    }

    class LinearCollection {
        Collection<?> items;
        public LinearCollection(Object objArray) {
            if (objArray == null) {
                items = null;
            } else if (objArray instanceof Object[]) {
                items = Arrays.asList((Object[]) objArray);
            } else if (objArray instanceof Collection<?>) {
                this.items = (Collection<?>) objArray;
            } else {
                items = null;
            }
        }

        public StringBuilder serialize() {
            if (Objects.isNull(items)) {
                return null;
            }
            StringBuilder aStr = new StringBuilder(256);
            if (items.isEmpty()) {
                aStr.append("[]");
                return aStr;
            }
            aStr.append("[");
            for (Object item : items) {
                aStr.append(new ValueSerializer(item).serialize());
                aStr.append(",");
            }
            aStr.deleteCharAt(aStr.length() - 1);
            aStr.append("]");
            return aStr;
        }
    }



    class MappedCollection {

        Map<?, ?> aMap;

        public MappedCollection(Object iMap) {
            if(iMap ==null) {
                this.aMap = null;
            }else if(iMap instanceof Map<?,?> ) {
                this.aMap = (Map<?, ?>) iMap;
            } else {
                this.aMap = null;
            }
        }

        public StringBuilder serialize() {
            if (Objects.isNull(aMap)) {
                return null;
            }
            StringBuilder aStr = new StringBuilder(256);
            if (aMap.entrySet().isEmpty()) {
                aStr.append("{}");
                return aStr;
            }
            aStr.append("{");
            for (Map.Entry<?, ?> aEntry : aMap.entrySet()) {
                aStr.append("\"").append(aEntry.getKey()).append("\": ");
                aStr.append(new ValueSerializer(aEntry.getValue()).serialize());
                aStr.append(",");
            }
            aStr.deleteCharAt(aStr.length() - 1);
            aStr.append("}");
            return aStr;
        }
    }
}
